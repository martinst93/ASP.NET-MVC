// <auto-generated />
using System;
using E_Store.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E_Store.DataAccess.Migrations
{
    [DbContext(typeof(EStoreDbContext))]
    [Migration("20210831134741_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("E_Store.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Delivered = false,
                            PaymentMethod = 1,
                            Price = 100.0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Delivered = true,
                            PaymentMethod = 1,
                            Price = 150.0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Delivered = false,
                            PaymentMethod = 2,
                            Price = 200.0,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("E_Store.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("Promotion")
                        .HasColumnType("bit");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfPromotion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 1,
                            Description = "New Phone",
                            Image = "1.jpeg",
                            Name = "Samsung Galaxy M32",
                            Price = 200.0,
                            Promotion = false,
                            Review = "4 stars",
                            TypeOfPromotion = 3
                        },
                        new
                        {
                            Id = 2,
                            Category = 2,
                            Description = "New Laptop",
                            Image = "2.jpeg",
                            Name = "Lenovo G500S",
                            Price = 250.0,
                            Promotion = true,
                            Review = "4 stars",
                            TypeOfPromotion = 1
                        },
                        new
                        {
                            Id = 3,
                            Category = 4,
                            Description = "New Headphones",
                            Image = "3.jpeg",
                            Name = "JBL 100",
                            Price = 100.0,
                            Promotion = true,
                            Review = "4 stars",
                            TypeOfPromotion = 2
                        },
                        new
                        {
                            Id = 4,
                            Category = 5,
                            Description = "New Monitor",
                            Image = "4.jpeg",
                            Name = "LG M6700",
                            Price = 200.0,
                            Promotion = false,
                            Review = "2 stars",
                            TypeOfPromotion = 3
                        },
                        new
                        {
                            Id = 5,
                            Category = 3,
                            Description = "New PC",
                            Image = "5.jpeg",
                            Name = "PC 123",
                            Price = 500.0,
                            Promotion = true,
                            Review = "5 stars",
                            TypeOfPromotion = 1
                        });
                });

            modelBuilder.Entity("E_Store.Domain.Models.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrder");
                });

            modelBuilder.Entity("E_Store.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountName = "JoeB",
                            Address = "Street 1",
                            Email = "joeb@gmail.com",
                            FirstName = "Joe",
                            LastName = "Black",
                            PhoneNumber = 123456L
                        },
                        new
                        {
                            Id = 2,
                            AccountName = "MarryW",
                            Address = "Street 2",
                            Email = "marryw@gmail.com",
                            FirstName = "Mary",
                            LastName = "White",
                            PhoneNumber = 654321L
                        },
                        new
                        {
                            Id = 3,
                            AccountName = "RayB",
                            Address = "Street 3",
                            Email = "rayb@gmail.com",
                            FirstName = "Ray",
                            LastName = "Brown",
                            PhoneNumber = 321456L
                        });
                });

            modelBuilder.Entity("E_Store.Domain.Models.Order", b =>
                {
                    b.HasOne("E_Store.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("E_Store.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Store.Domain.Models.ProductOrder", b =>
                {
                    b.HasOne("E_Store.Domain.Models.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Store.Domain.Models.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Store.Domain.Models.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("E_Store.Domain.Models.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("E_Store.Domain.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
